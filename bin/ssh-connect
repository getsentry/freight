#!/usr/bin/env python


import os
import subprocess
import sys

from tempfile import NamedTemporaryFile

from freight.config import create_app
from freight.models import Repository

app = create_app()
app_context = app.app_context()
app_context.push()


def get_repo(url):
    repo = Repository.query.filter(Repository.url == url).first()
    if not repo:
        print("Repository not found")
        sys.exit(1)

    return repo


repo_url = os.environ.get("FREIGHT_SSH_REPO")
if not repo_url:
    raise ValueError("No 'FREIGHT_SSH_REPO' in environment")

repo = get_repo(repo_url)

SSH_LOG_LEVEL = {
    "CRITICAL": "ERROR",
    "FATAL": "ERROR",
    "ERROR": "ERROR",
    "WARN": "INFO",
    "WARNING": "INFO",
    "INFO": "INFO",
    "DEBUG": "DEBUG",
}[app.config["LOG_LEVEL"].upper()]

command = [
    "ssh",
    # Not supported in all ssh client versions
    # '-oUserAuthorizedKeysFile=/dev/null',
    f"-oLogLevel={SSH_LOG_LEVEL}",
    "-oStrictHostKeyChecking=no",
    "-oUserKnownHostsFile=/dev/null",
]

if app.config["SSH_PRIVATE_KEY"]:
    f = NamedTemporaryFile()
    f.write(app.config["SSH_PRIVATE_KEY"].encode("utf8"))
    f.flush()

    command.append(f"-i{f.name}")

command.append("--")
command.extend(sys.argv[1:])

sys.exit(
    subprocess.call(
        command, cwd=os.getcwd(), env=os.environ, stdout=sys.stdout, stderr=sys.stderr
    )
)
