#!/usr/bin/env python

from __future__ import absolute_import, unicode_literals

import logging
import os
import sys

from datetime import datetime
from flask import current_app

from freight import providers, vcs
from freight.config import create_app, db, redis
from freight.models import App, LogChunk, Repository, Task, TaskStatus
from freight.utils.redis import lock
from freight.utils.workspace import TemporaryWorkspace, Workspace


def main(task_id):
    task = Task.query.get(task_id)
    if not task:
        raise ValueError('Task(id=%s) not found' % task_id)

    app = App.query.filter(App.id == task.app_id).first()
    repo = Repository.query.filter(Repository.id == app.repository_id).first()

    task.date_started = datetime.utcnow()
    task.status = TaskStatus.in_progress
    db.session.add(task)
    db.session.commit()

    provider = providers.get(task.provider)

    repo_home = Workspace(
        path=repo.get_path(),
    )


    vcs_backend = vcs.get(
        repo.vcs,
        url=repo.url,
        workspace=repo_home,
    )

    with lock(redis, 'repo:update:{}'.format(repo.id)):
        vcs_backend.clone_or_update()

    workspace = TemporaryWorkspace()

    try:
        vcs_backend.checkout(task.ref, workspace)

        try:
            provider.execute(workspace, task)
        except Exception as exc:
            current_app.logger.exception(unicode(exc))
            task.status = TaskStatus.failed
        else:
            task.status = TaskStatus.finished
        task.date_finished = datetime.utcnow()
        db.session.add(task)
        db.session.commit()
    finally:
        workspace.remove()


if __name__ == '__main__':
    # add workspace explicit handler
    logger = logging.getLogger('workspace')
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(logging.INFO)

    app = create_app()
    with app.app_context():
        main(sys.argv[1])
