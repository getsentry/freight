#!/usr/bin/env python
# TODO(dcramer): this needs abstracted into another Python helper and this file
# should simply be a shell around calling that (it will ensure easier testing)
from __future__ import absolute_import

import logging
import os
import sys

from datetime import datetime
from flask import current_app
from time import sleep

from freight import checks, providers, vcs
from freight.config import create_app, db, redis
from freight.exceptions import CheckError, CheckPending
from freight.models import App, Repository, Task, TaskStatus
from freight.utils.logging import ColoredFormatter
from freight.utils.redis import lock
from freight.utils.workspace import TemporaryWorkspace, Workspace

INFO_CHECK_FINISHED = 'Check has passed: {check}'

INFO_CHECK_PENDING = 'Waiting on check {check}:\n  {message}'
INFO_CHECK_STALE = 'Check {check} has spent {timer}s in it\'s current state.'
ERR_CHECK_FAILED = 'Task cancelled due to failing check {check}:\n  {message}'


def checks_are_passing(app, task, log):
    if not task.checks:
        return True

    checks_with_ids = dict(enumerate(task.checks))

    announced_checks = set()
    pending_checks = set(checks_with_ids.keys())
    timer = 0
    interval = 5
    while pending_checks:
        for check_id in set(pending_checks):
            check_config = checks_with_ids[check_id]
            check = checks.get(check_config['type'])
            try:
                check.check(app, task.sha, check_config['config'])

            except CheckPending as e:
                if check_config['type'] not in announced_checks:
                    log.info(INFO_CHECK_PENDING.format(
                        check=check_config['type'],
                        message=unicode(e),
                    ))
                    announced_checks.add(check_config['type'])

            except CheckError as e:
                log.error(ERR_CHECK_FAILED.format(
                    check=check_config['type'],
                    message=unicode(e),
                ))
                return False

            else:
                pending_checks.remove(check_id)

                log.info(INFO_CHECK_FINISHED.format(
                    check=check_config['type'],
                ))

        if pending_checks:
            sleep(interval)
            timer += interval
            # Report that we're still waiting after ten intervals.
            if not timer % (interval * 10):
                log.info(INFO_CHECK_STALE.format(
                    check=check_config['type'],
                    timer=timer,
                ))

    return True


def main(task_id, log):
    task = Task.query.get(task_id)
    if not task:
        raise ValueError('Task(id=%s) not found' % task_id)

    app = App.query.filter(App.id == task.app_id).first()
    repo = Repository.query.filter(Repository.id == app.repository_id).first()

    task.date_started = datetime.utcnow()
    task.status = TaskStatus.in_progress
    db.session.add(task)
    db.session.commit()

    if not task.was_forced and not checks_are_passing(app, task, log):
        task.status = TaskStatus.failed
        task.date_finished = datetime.utcnow()
        db.session.add(task)
        db.session.commit()
        return

    provider = providers.get(task.provider)

    repo_home = Workspace(
        path=repo.get_path(),
        log=log,
    )

    vcs_backend = vcs.get(
        repo.vcs,
        url=repo.url,
        workspace=repo_home,
    )

    with lock(redis, 'repo:update:{}'.format(repo.id)):
        vcs_backend.clone_or_update()

    workspace = TemporaryWorkspace(log=log)

    try:
        vcs_backend.checkout(task.sha, workspace)

        try:
            provider.execute(workspace, task)
        except Exception as exc:
            current_app.logger.exception(unicode(exc))
            task.status = TaskStatus.failed
        else:
            task.status = TaskStatus.finished
        task.date_finished = datetime.utcnow()
        db.session.add(task)
        db.session.commit()
    except Exception:
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        workspace.remove()


if __name__ == '__main__':
    # add workspace explicit handler
    handler = logging.StreamHandler()
    handler.setFormatter(ColoredFormatter('>> %(message)s'))

    log = logging.getLogger('freight')
    log.addHandler(handler)
    log.setLevel(logging.INFO)

    # remove buffering on stdout/stderr
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 0)

    app = create_app()
    with app.app_context():
        main(sys.argv[1], log)
